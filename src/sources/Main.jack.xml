<class>
  <keyword>class</keyword>
  <identifier>Main</identifier>
  <symbol>{</symbol>
  <subroutine_dec>
    <keyword>method</keyword>
    <type>
      <keyword>int</keyword>
    </type>
    <subroutine_name>
      <identifier>main</identifier>
    </subroutine_name>
    <symbol>(</symbol>
    <symbol>)</symbol>
    <subroutine_body>
      <symbol>{</symbol>
      <var_dec>
        <keyword>var</keyword>
        <type>
          <class_name>
            <identifier>Hangman</identifier>
          </class_name>
        </type>
        <var_name>
          <identifier>hangman</identifier>
        </var_name>
        <symbol>;</symbol>
      </var_dec>
      <var_dec>
        <keyword>var</keyword>
        <type>
          <keyword>char</keyword>
        </type>
        <var_name>
          <identifier>letter</identifier>
        </var_name>
        <symbol>;</symbol>
      </var_dec>
      <statements>
        <let_statement>
          <keyword>let</keyword>
          <var_name>
            <identifier>hangman</identifier>
          </var_name>
          <symbol>=</symbol>
          <expression>
            <term>
              <subroutine_call>
                <subroutine_name>
                  <identifier>new</identifier>
                </subroutine_name>
                <symbol>(</symbol>
                <symbol>)</symbol>
              </subroutine_call>
            </term>
          </expression>
          <symbol>;</symbol>
        </let_statement>
        <while_statement>
          <keyword>while</keyword>
          <symbol>(</symbol>
          <expression>
            <term>
              <unary_op>~</unary_op>
              <term>
                <subroutine_call>
                  <subroutine_name>
                    <identifier>is_hanged</identifier>
                  </subroutine_name>
                  <symbol>(</symbol>
                  <symbol>)</symbol>
                </subroutine_call>
              </term>
            </term>
            <op>
              <symbol>&</symbol>
            </op>
            <term>
              <unary_op>~</unary_op>
              <term>
                <subroutine_call>
                  <subroutine_name>
                    <identifier>has_won</identifier>
                  </subroutine_name>
                  <symbol>(</symbol>
                  <symbol>)</symbol>
                </subroutine_call>
              </term>
            </term>
          </expression>
          <symbol>)</symbol>
          <symbol>{</symbol>
          <statements>
            <do_statement>
              <keyword>do</keyword>
              <subroutine_call>
                <class_name>
                  <identifier>hangman</identifier>
                </class_name>
                <symbol>.</symbol>
                <subroutine_name>
                  <identifier>draw</identifier>
                </subroutine_name>
                <symbol>(</symbol>
                <symbol>)</symbol>
              </subroutine_call>
              <symbol>;</symbol>
            </do_statement>
            <let_statement>
              <keyword>let</keyword>
              <var_name>
                <identifier>letter</identifier>
              </var_name>
              <symbol>=</symbol>
              <expression>
                <term>
                  <subroutine_call>
                    <subroutine_name>
                      <identifier>readChar</identifier>
                    </subroutine_name>
                    <symbol>(</symbol>
                    <symbol>)</symbol>
                  </subroutine_call>
                </term>
              </expression>
              <symbol>;</symbol>
            </let_statement>
            <do_statement>
              <keyword>do</keyword>
              <subroutine_call>
                <class_name>
                  <identifier>Output</identifier>
                </class_name>
                <symbol>.</symbol>
                <subroutine_name>
                  <identifier>backSpace</identifier>
                </subroutine_name>
                <symbol>(</symbol>
                <symbol>)</symbol>
              </subroutine_call>
              <symbol>;</symbol>
            </do_statement>
            <do_statement>
              <keyword>do</keyword>
              <subroutine_call>
                <class_name>
                  <identifier>hangman</identifier>
                </class_name>
                <symbol>.</symbol>
                <subroutine_name>
                  <identifier>guess</identifier>
                </subroutine_name>
                <symbol>(</symbol>
                <expression_list>
                  <expression>
                    <term>
                      <var_name>
                        <identifier>letter</identifier>
                      </var_name>
                    </term>
                  </expression>
                </expression_list>
                <symbol>)</symbol>
              </subroutine_call>
              <symbol>;</symbol>
            </do_statement>
          </statements>
          <symbol>}</symbol>
        </while_statement>
        <do_statement>
          <keyword>do</keyword>
          <subroutine_call>
            <class_name>
              <identifier>hangman</identifier>
            </class_name>
            <symbol>.</symbol>
            <subroutine_name>
              <identifier>draw</identifier>
            </subroutine_name>
            <symbol>(</symbol>
            <symbol>)</symbol>
          </subroutine_call>
          <symbol>;</symbol>
        </do_statement>
        <do_statement>
          <keyword>do</keyword>
          <subroutine_call>
            <class_name>
              <identifier>Output</identifier>
            </class_name>
            <symbol>.</symbol>
            <subroutine_name>
              <identifier>println</identifier>
            </subroutine_name>
            <symbol>(</symbol>
            <symbol>)</symbol>
          </subroutine_call>
          <symbol>;</symbol>
        </do_statement>
        <if_statement>
          <keyword>if</keyword>
          <symbol>(</symbol>
          <expression>
            <term>
              <subroutine_call>
                <subroutine_name>
                  <identifier>is_hanged</identifier>
                </subroutine_name>
                <symbol>(</symbol>
                <symbol>)</symbol>
              </subroutine_call>
            </term>
          </expression>
          <symbol>)</symbol>
          <symbol>{</symbol>
          <statements>
            <do_statement>
              <keyword>do</keyword>
              <subroutine_call>
                <class_name>
                  <identifier>Output</identifier>
                </class_name>
                <symbol>.</symbol>
                <subroutine_name>
                  <identifier>printString</identifier>
                </subroutine_name>
                <symbol>(</symbol>
                <expression_list>
                  <expression>
                    <term>
                      <string_constant>
                        <string_constant>"YOU LOST"</string_constant>
                      </string_constant>
                    </term>
                  </expression>
                </expression_list>
                <symbol>)</symbol>
              </subroutine_call>
              <symbol>;</symbol>
            </do_statement>
          </statements>
          <symbol>}</symbol>
        </if_statement>
        <if_statement>
          <keyword>if</keyword>
          <symbol>(</symbol>
          <expression>
            <term>
              <subroutine_call>
                <subroutine_name>
                  <identifier>has_won</identifier>
                </subroutine_name>
                <symbol>(</symbol>
                <symbol>)</symbol>
              </subroutine_call>
            </term>
          </expression>
          <symbol>)</symbol>
          <symbol>{</symbol>
          <statements>
            <do_statement>
              <keyword>do</keyword>
              <subroutine_call>
                <class_name>
                  <identifier>Output</identifier>
                </class_name>
                <symbol>.</symbol>
                <subroutine_name>
                  <identifier>printString</identifier>
                </subroutine_name>
                <symbol>(</symbol>
                <expression_list>
                  <expression>
                    <term>
                      <string_constant>
                        <string_constant>"YOU WON"</string_constant>
                      </string_constant>
                    </term>
                  </expression>
                </expression_list>
                <symbol>)</symbol>
              </subroutine_call>
              <symbol>;</symbol>
            </do_statement>
          </statements>
          <symbol>}</symbol>
        </if_statement>
        <return_statement>
          <keyword>return</keyword>
          <expression>
            <term>
              <integer_constant>
                <integer_constant>0</integer_constant>
              </integer_constant>
            </term>
          </expression>
          <symbol>;</symbol>
        </return_statement>
      </statements>
      <symbol>}</symbol>
    </subroutine_body>
  </subroutine_dec>
  <symbol>}</symbol>
</class>
