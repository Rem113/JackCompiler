<class>
	<keyword>class</keyword>
	<identifier>Main</identifier>
	<symbol>{</symbol>
	<subroutine_dec>
		<keyword>function</keyword>
		<keyword>void</keyword>
		<subroutine_name>
			<identifier>main</identifier>
		</subroutine_name>
		<symbol>(</symbol>
		<symbol>)</symbol>
		<subroutine_body>
			<symbol>{</symbol>
			<var_dec>
				<keyword>var</keyword>
				<type>
					<class_name>
						<identifier>Array</identifier>
					</class_name>
				</type>
				<var_name>
					<identifier>a</identifier>
				</var_name>
				<symbol>;</symbol>
			</var_dec>
			<var_dec>
				<keyword>var</keyword>
				<type>
					<keyword>int</keyword>
				</type>
				<var_name>
					<identifier>length</identifier>
				</var_name>
				<symbol>;</symbol>
			</var_dec>
			<var_dec>
				<keyword>var</keyword>
				<type>
					<keyword>int</keyword>
				</type>
				<var_name>
					<identifier>i</identifier>
				</var_name>
				<symbol>,</symbol>
				<var_name>
					<identifier>sum</identifier>
				</var_name>
				<symbol>;</symbol>
			</var_dec>
			<statements>
				<let_statement>
					<keyword>let</keyword>
					<var_name>
						<identifier>length</identifier>
					</var_name>
					<symbol>=</symbol>
					<expression>
						<term>
							<subroutine_call>
								<class_name>
									<identifier>Keyboard</identifier>
								</class_name>
								<symbol>.</symbol>
								<subroutine_name>
									<identifier>readInt</identifier>
								</subroutine_name>
								<symbol>(</symbol>
								<expression_list>
									<expression>
										<term>
											<string_constant>HOW MANY NUMBERS? </string_constant>
										</term>
									</expression>
								</expression_list>
								<symbol>)</symbol>
							</subroutine_call>
						</term>
					</expression>
					<symbol>;</symbol>
				</let_statement>
				<let_statement>
					<keyword>let</keyword>
					<var_name>
						<identifier>a</identifier>
					</var_name>
					<symbol>=</symbol>
					<expression>
						<term>
							<subroutine_call>
								<class_name>
									<identifier>Array</identifier>
								</class_name>
								<symbol>.</symbol>
								<subroutine_name>
									<identifier>new</identifier>
								</subroutine_name>
								<symbol>(</symbol>
								<expression_list>
									<expression>
										<term>
											<var_name>
												<identifier>length</identifier>
											</var_name>
										</term>
									</expression>
								</expression_list>
								<symbol>)</symbol>
							</subroutine_call>
						</term>
					</expression>
					<symbol>;</symbol>
				</let_statement>
				<let_statement>
					<keyword>let</keyword>
					<var_name>
						<identifier>i</identifier>
					</var_name>
					<symbol>=</symbol>
					<expression>
						<term>
							<integer_constant>0</integer_constant>
						</term>
					</expression>
					<symbol>;</symbol>
				</let_statement>
				<while_statement>
					<keyword>while</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<var_name>
								<identifier>i</identifier>
							</var_name>
						</term>
						<op>
							<symbol>
								<null
							</symbol>
						</op>
						<term>
							<var_name>
								<identifier>length</identifier>
							</var_name>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<let_statement>
							<keyword>let</keyword>
							<var_name>
								<identifier>a</identifier>
							</var_name>
							<symbol>[</symbol>
							<expression>
								<term>
									<var_name>
										<identifier>i</identifier>
									</var_name>
								</term>
							</expression>
							<symbol>]</symbol>
							<symbol>=</symbol>
							<expression>
								<term>
									<subroutine_call>
										<class_name>
											<identifier>Keyboard</identifier>
										</class_name>
										<symbol>.</symbol>
										<subroutine_name>
											<identifier>readInt</identifier>
										</subroutine_name>
										<symbol>(</symbol>
										<expression_list>
											<expression>
												<term>
													<string_constant>ENTER THE NEXT NUMBER: </string_constant>
												</term>
											</expression>
										</expression_list>
										<symbol>)</symbol>
									</subroutine_call>
								</term>
							</expression>
							<symbol>;</symbol>
						</let_statement>
						<let_statement>
							<keyword>let</keyword>
							<var_name>
								<identifier>i</identifier>
							</var_name>
							<symbol>=</symbol>
							<expression>
								<term>
									<var_name>
										<identifier>i</identifier>
									</var_name>
								</term>
								<op>
									<symbol>+</symbol>
								</op>
								<term>
									<integer_constant>1</integer_constant>
								</term>
							</expression>
							<symbol>;</symbol>
						</let_statement>
					</statements>
					<symbol>}</symbol>
				</while_statement>
				<let_statement>
					<keyword>let</keyword>
					<var_name>
						<identifier>i</identifier>
					</var_name>
					<symbol>=</symbol>
					<expression>
						<term>
							<keyword_constant>this</keyword_constant>
						</term>
					</expression>
					<symbol>;</symbol>
				</let_statement>
				<let_statement>
					<keyword>let</keyword>
					<var_name>
						<identifier>sum</identifier>
					</var_name>
					<symbol>=</symbol>
					<expression>
						<term>
							<integer_constant>0</integer_constant>
						</term>
					</expression>
					<symbol>;</symbol>
				</let_statement>
				<while_statement>
					<keyword>while</keyword>
					<symbol>(</symbol>
					<expression>
						<term>
							<var_name>
								<identifier>i</identifier>
							</var_name>
						</term>
						<op>
							<symbol>
								<null
							</symbol>
						</op>
						<term>
							<var_name>
								<identifier>length</identifier>
							</var_name>
						</term>
					</expression>
					<symbol>)</symbol>
					<symbol>{</symbol>
					<statements>
						<let_statement>
							<keyword>let</keyword>
							<var_name>
								<identifier>sum</identifier>
							</var_name>
							<symbol>=</symbol>
							<expression>
								<term>
									<var_name>
										<identifier>sum</identifier>
									</var_name>
								</term>
								<op>
									<symbol>+</symbol>
								</op>
								<term>
									<identifier>a</identifier>
									<symbol>[</symbol>
									<expression>
										<term>
											<var_name>
												<identifier>i</identifier>
											</var_name>
										</term>
									</expression>
									<symbol>]</symbol>
								</term>
							</expression>
							<symbol>;</symbol>
						</let_statement>
						<let_statement>
							<keyword>let</keyword>
							<var_name>
								<identifier>i</identifier>
							</var_name>
							<symbol>=</symbol>
							<expression>
								<term>
									<var_name>
										<identifier>i</identifier>
									</var_name>
								</term>
								<op>
									<symbol>+</symbol>
								</op>
								<term>
									<integer_constant>1</integer_constant>
								</term>
							</expression>
							<symbol>;</symbol>
						</let_statement>
					</statements>
					<symbol>}</symbol>
				</while_statement>
				<do_statement>
					<keyword>do</keyword>
					<subroutine_call>
						<class_name>
							<identifier>Output</identifier>
						</class_name>
						<symbol>.</symbol>
						<subroutine_name>
							<identifier>printString</identifier>
						</subroutine_name>
						<symbol>(</symbol>
						<expression_list>
							<expression>
								<term>
									<string_constant>THE AVERAGE IS: </string_constant>
								</term>
							</expression>
						</expression_list>
						<symbol>)</symbol>
					</subroutine_call>
					<symbol>;</symbol>
				</do_statement>
				<do_statement>
					<keyword>do</keyword>
					<subroutine_call>
						<class_name>
							<identifier>Output</identifier>
						</class_name>
						<symbol>.</symbol>
						<subroutine_name>
							<identifier>printInt</identifier>
						</subroutine_name>
						<symbol>(</symbol>
						<expression_list>
							<expression>
								<term>
									<var_name>
										<identifier>sum</identifier>
									</var_name>
								</term>
								<op>
									<symbol>/</symbol>
								</op>
								<term>
									<var_name>
										<identifier>length</identifier>
									</var_name>
								</term>
							</expression>
						</expression_list>
						<symbol>)</symbol>
					</subroutine_call>
					<symbol>;</symbol>
				</do_statement>
				<do_statement>
					<keyword>do</keyword>
					<subroutine_call>
						<class_name>
							<identifier>Output</identifier>
						</class_name>
						<symbol>.</symbol>
						<subroutine_name>
							<identifier>println</identifier>
						</subroutine_name>
						<symbol>(</symbol>
						<symbol>)</symbol>
					</subroutine_call>
					<symbol>;</symbol>
				</do_statement>
				<return_statement>
					<keyword>return</keyword>
					<symbol>;</symbol>
				</return_statement>
			</statements>
			<symbol>}</symbol>
		</subroutine_body>
	</subroutine_dec>
	<symbol>}</symbol>
</class>